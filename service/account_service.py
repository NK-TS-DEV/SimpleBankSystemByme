from models.account import Bankaccount
from service.file_manager import FileManager

class AccountService:

    @staticmethod
    def create_bank_account(account_id: int, initial_balance: float = 0.0, currency: str = "USD") -> Bankaccount:
        return Bankaccount(account_id, initial_balance, currency)

    @staticmethod
    def deposit_to_account(account: Bankaccount, amount: float, currency: str) -> None:
        return account.deposit(amount, currency)

    @staticmethod
    def withdraw_from_account(account: Bankaccount, amount: float, currency: str) -> bool:
        return account.withdraw(amount, currency)

    @staticmethod
    def transfer_between_accounts(from_account: Bankaccount, to_account: Bankaccount, amount: float, currency: str) -> bool:
        return from_account.transfer(to_account, amount, currency)

    @staticmethod
    def withdraw(args):
        users = FileManager.load_all_users()
        user = next((u for u in users if u.user_id == args.user_id), None)
        if not user:
            print("User not found")
            return

        account = user.get_account_by_id(args.account_id)
        if account:
            result = account.withdraw(args.amount, account.currency)
            FileManager.save_all_users(users)
            print(f"üí∏ {result}")
        else:
            print("Account not found")







    @staticmethod
    def create_account(args):
        users = FileManager.load_all_users()
        user = next((u for u in users if u.user_id == args.user_id), None)
        if not user:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        account = Bankaccount(account_id=args.account_id, balance=0.0, currency=args.currency)
        user.accounts.append(account)
        FileManager.save_all_users(users)
        print(f"üè¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ ID {args.account_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.username}")

    @staticmethod
    def deposit(args):
        users = FileManager.load_all_users()
        user = next((u for u in users if u.user_id == args.user_id), None)
        if not user:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        account = user.get_account_by_id(args.account_id)
        if account:
            account.deposit(args.amount, account.currency)  # <-- –í–ê–ñ–ù–û! –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —É –æ–±—ä–µ–∫—Ç–∞
            FileManager.save_all_users(users)
            print(f"üí∞ –ü–æ–ø–æ–≤–Ω–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ {args.account_id} –Ω–∞ {args.amount}")
        else:
            print("‚ùå –†–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    @staticmethod
    def transfer(args):
        users = FileManager.load_all_users()
        user = next((u for u in users if u.user_id == args.user_id), None)
        if not user:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        from_acc = user.get_account_by_id(args.from_id)
        to_acc = user.get_account_by_id(args.to_id)
        if from_acc and to_acc:
            result = from_acc.transfer(to_acc, args.amount, from_acc.currency)
            FileManager.save_all_users(users)
            print(result)
        else:
            print("‚ùå –û–¥–∏–Ω —ñ–∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
